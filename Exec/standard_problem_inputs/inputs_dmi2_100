amrex.use_gpu_aware_mpi=1


n_cell = 256 256 4
max_grid_size_x = 256
max_grid_size_y = 256
max_grid_size_z = 4
dt = 2.5e-14
nsteps = 100000
plot_int = 1000
chk_int = 100000

prob_lo = -100.0e-9 -100.0e-9 -1.0e-9
prob_hi =  100.0e-9  100.0e-9  1.0e-9

mu0 = 1.25663706212e-6 
precession = 1
demag_coupling = 0
M_normalization = 1
exchange_coupling = 1
DMI_coupling = 1
anisotropy_coupling = 1

diag_type = 5

timedependent_alpha = 0
alpha_parser(x,y,z,t) =  "      0.05*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
Ms_parser(x,y,z) =       "     1.1e6*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is Ampere/m
gamma_parser(x,y,z) =    " -1.759e11*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
exchange_parser(x,y,z) = "  16.0e-12*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m
anisotropy_parser(x,y,z) = " 510.0e3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^3
anisotropy_axis = 0.0 0.0 1.0

# D_c = 4 sqrt(AK) / pi = 3.6371e-3
#DMI_parser(x,y,z) = "       -1.25e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -1.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -2.0e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -2.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -3.0e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -3.25e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "      -3.375e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -3.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
DMI_parser(x,y,z) = "      -3.625e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -3.75e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -4.0e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "       -4.25e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -4.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -5.0e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -5.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -6.0e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "        -6.5e-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2
#DMI_parser(x,y,z) = "         -7.0-3*(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # unit is J/m^2

# quasi-uniform initialization: change the value before pi to 0; or Mx = My = 0; Mz(i,j,k) = (sqrt(x*x + y*y) <= 100.0e-9) ? Ms_arr(i,j,k):0.0;
# skyrmion initialization: sin(pi * sqrt(x*x + y*y) / 100.0e-9)
# 2pi state initialization: sin(2*pi * sqrt(x*x + y*y) / 100.0e-9)
# 3pi state initialization: sin(3*pi * sqrt(x*x + y*y) / 100.0e-9)
Mx_parser(x,y,z) = "1.1e6 * sin(1*3.141592654 * sqrt(x*x + y*y) / 100.0e-9) * x/sqrt(x*x + y*y) *(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
My_parser(x,y,z) = "1.1e6 * sin(1*3.141592654 * sqrt(x*x + y*y) / 100.0e-9) * y/sqrt(x*x + y*y) *(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)"
Mz_parser(x,y,z) = "1.1e6 * cos(1*3.141592654 * sqrt(x*x + y*y) / 100.0e-9) *(sqrt(x*x + y*y) <= 100.0e-9) * (z>=-1.0e-9) * (z<=1.0e-9)" # for the skyrmion state

timedependent_Hbias = 0
Hx_bias_parser(x,y,z,t) = "0.0"
Hy_bias_parser(x,y,z,t) = "0.0"
Hz_bias_parser(x,y,z,t) = "0.0"

# INTEGRATION
TimeIntegratorOption = 1 #Forward Euler
#TimeIntegratorOption = 2 #Predictor-corrector
#TimeIntegratorOption = 3 #2nd order artemis way
#TimeIntegratorOption = 4 #amrex/sundials backend integrators

# tolerance threshold (L_inf change between iterations) for TimeIntegrationOption 2 and 3
iterative_tolerance = 1.e-9

# for TimeIntegratorOption = 4, integration.type can take on the following values:
## 0 or "ForwardEuler" => Native AMReX Forward Euler integrator
## 1 or "RungeKutta"   => Native AMReX Explicit Runge Kutta controlled by integration.rk.type
## 2 or "SUNDIALS"     => SUNDIALS backend controlled by integration.sundials.type
integration.type = RungeKutta

## for integration.type = RungeKutta, integration.rk.type can take the following values:
### 0 = User-specified Butcher Tableau
### 1 = Forward Euler
### 2 = Trapezoid Method
### 3 = SSPRK3 Method
### 4 = RK4 Method
integration.rk.type = 4

## If using a user-specified Butcher Tableau, then
## set nodes, weights, and table entries here:
#
## The Butcher Tableau is read as a flattened,
## lower triangular matrix (but including the diagonal)
## in row major format.
integration.rk.weights = 1
integration.rk.nodes = 0
integration.rk.tableau = 0.0

## for integration.type = SUNDIALS, set the SUNDIALS method type:
# ERK      = Explicit Runge-Kutta method
# DIRK     = Diagonally Implicit Runge-Kutta method
# IMEX-RK  = Implicit-Explicit Additive Runge-Kutta method
# EX-MRI   = Explicit Multirate Infatesimal method
# IM-MRI   = Implicit Multirate Infatesimal method
# IMEX-MRI = Implicit-Explicit Multirate Infatesimal method
integration.sundials.type = ERK

# *** Select a specific SUNDIALS ERK or DIRK method ***
# https://sundials.readthedocs.io/en/latest/arkode/Butcher_link.html#explicit-butcher-tables
# https://sundials.readthedocs.io/en/latest/arkode/Butcher_link.html#implicit-butcher-tables
integration.sundials.method = ARKODE_FORWARD_EULER_1_1
#integration.sundials.method = ARKODE_BACKWARD_EULER_1_1

# *** Select a specific SUNDIALS IMEX-RK method ***
# https://sundials.readthedocs.io/en/latest/arkode/Butcher_link.html#additive-butcher-tables
#integration.sundials.method_i = ARKODE_ARK2_DIRK_3_1_2
#integration.sundials.method_e = ARKODE_ARK2_ERK_3_1_2

# *** Select a specific SUNDIALS EX-MRI, IM-MRI, or IMEX-MRI method ***
# https://sundials.readthedocs.io/en/latest/arkode/Usage/MRIStep/MRIStepCoupling.html#mri-coupling-tables
#  *** Select a specific SUNDIALS MRI slow method coupling table ***
#integration.sundials.method = ARKODE_MIS_KW3
#  *** Select a specific SUNDIALS ERK or DIRK fast method ***
#integration.sundials.fast_type = ERK  # ERK or DIRK
#integration.sundials.fast_method = ARKODE_KNOTH_WOLKE_3_3
