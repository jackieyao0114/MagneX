###
n_cell = 50 10 1
max_grid_size_x = 50
max_grid_size_y = 10
max_grid_size_z = 1

nsteps = 100000000
plot_int = -1
chk_int = -1
restart = -1
diag_type = 2
Hbias_sweep = 1

prob_lo = 0. 0. 0.

# d/l_ex = 6
prob_hi = 150.e-9 30.e-9 3.e-9
dt = 1.e-12

mu0 = 1.25663e-6

Mx_parser(x,y,z) = "8.e5/sqrt(3.) * (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9)"
My_parser(x,y,z) = "8.e5/sqrt(3.) * (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9)"
Mz_parser(x,y,z) = "8.e5/sqrt(3.) * (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9)"

# Field Ensemble for hysteresis:  [Hx/Ms= +.08 -> -.08 -> +.08], [Hy/Ms= +.08 -> -.08 -> +.08], mu_0 [Hz/Ms= +.08 -> -.08 -> +.08]
# which is a field directed about 57 degrees offset from each coordinate axis
timedependent_Hbias = 0
Hx_bias_parser(x,y,z,t) = "3.4e4"
Hy_bias_parser(x,y,z,t) = "3.4e4"
Hz_bias_parser(x,y,z,t) = "3.4e4"

timedependent_alpha = 0
alpha_parser(x,y,z,t) =  " (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9) * 0.5"
Ms_parser(x,y,z) =       " (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9) * 8.e5"
gamma_parser(x,y,z) =    " (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9) * -1.759e11"
exchange_parser(x,y,z) = " (x>0.)*(x<150.e-9)*(y>0.)*(y<30.e-9)*(z>0.)*(z<3.e-9)* 1.005304e-11"
anisotropy_parser(x,y,z) = "0."
DMI_parser(x,y,z) = "0."

precession = 0
demag_coupling = 1
FFT_solver = 1
M_normalization = 1  # 0 = unsaturated case; 1 = saturated case
exchange_coupling = 1
anisotropy_coupling = 0
anisotropy_axis = 1.0 1.0 1.0
DMI_coupling = 0

# tolerance for equilibrium in M when Hbias_sweep = 1
equilibrium_tolerance = 1.e-9

# hysteresis increment for H_bias
increment_size = 1280

# number of increments ONE WAY: Must = 2*(Hx_bias/increment_size)
nsteps_hysteresis = 100

# INTEGRATION

#TimeIntegratorOption = 1 #Forward Euler
#TimeIntegratorOption = 2 #Predictor-corrector
#TimeIntegratorOption = 3 #2nd order artemis way
TimeIntegratorOption = 4 #amrex/sundials backend integrators

# tolerance threshold (L_inf change between iterations) for TimeIntegrationOption 2 and 3
iterative_tolerance = 1.e-9

## amrex/sundials backend integrators
## *** Selecting the integrator backend ***
## integration.type can take on the following string or int values:
## (without the quotation marks)
## "ForwardEuler" or "0" = Native Forward Euler Integrator
## "RungeKutta" or "1"   = Native Explicit Runge Kutta controlled by integration.rk.type
## "SUNDIALS" or "2"     = SUNDIALS Integrators controlled by integration.sundials.strategy
integration.type = RungeKutta

## *** Parameters Needed For Native Explicit Runge-Kutta ***
#
## integration.rk.type can take the following values:
### 0 = User-specified Butcher Tableau
### 1 = Forward Euler
### 2 = Trapezoid Method
### 3 = SSPRK3 Method
### 4 = RK4 Method
integration.rk.type = 4

## If using a user-specified Butcher Tableau, then
## set nodes, weights, and table entries here:
#
## The Butcher Tableau is read as a flattened,
## lower triangular matrix (but including the diagonal)
## in row major format.
integration.rk.weights = 1
integration.rk.nodes = 0
integration.rk.tableau = 0.0

## *** Parameters Needed For SUNDIALS Integrators ***
## integration.sundials.strategy specifies which ARKODE strategy to use.
## The available options are (without the quotations):
## "ERK" = Explicit Runge Kutta
## "MRI" = Multirate Integrator
## "MRITEST" = Tests the Multirate Integrator by setting a zero-valued fast RHS function
## for example:
integration.sundials.strategy = ERK

## *** Parameters Specific to SUNDIALS ERK Strategy ***
## (Requires integration.type=SUNDIALS and integration.sundials.strategy=ERK)
## integration.sundials.erk.method specifies which explicit Runge Kutta method
## for SUNDIALS to use. The following options are supported:
## "SSPRK3" = 3rd order strong stability preserving RK (default)
## "Trapezoid" = 2nd order trapezoidal rule
## "ForwardEuler" = 1st order forward euler
## for example:
integration.sundials.erk.method = SSPRK3

## *** Parameters Specific to SUNDIALS MRI Strategy ***
## (Requires integration.type=SUNDIALS and integration.sundials.strategy=MRI)
## integration.sundials.mri.implicit_inner specifies whether or not to use an implicit inner solve
## integration.sundials.mri.outer_method specifies which outer (slow) method to use
## integration.sundials.mri.inner_method specifies which inner (fast) method to use
## The following options are supported for both the inner and outer methods:
## "KnothWolke3" = 3rd order Knoth-Wolke method (default for outer method)
## "Trapezoid" = 2nd order trapezoidal rule
## "ForwardEuler" = 1st order forward euler (default for inner method)
## for example:
integration.sundials.mri.implicit_inner = false
integration.sundials.mri.outer_method = KnothWolke3
integration.sundials.mri.inner_method = Trapezoid
